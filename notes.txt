UNIT TESTING
************
- Unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use.
- These individual units tested are like: classes, functions and subroutines are tested to see if they are giving desired results or not.

WHY UNIT TEST? WHY SHOULD WE UNIT TEST OUR CODE?
************************************************
1. Tests reduce bugs in new features and existing features.
- During development of new or existing featues, Unit tests assist to reduce in reducing the bugs that might be seen during execution of your code.

2. Tests are good documentations.
- Unit tests serves as good documentation for someone who is using your code i.e. since in unit testing we are testing the classes, functions the person will be able to understand how to use your code.

3. Tests reduce the cost of change.
- Unit tests reduce the cost of change in production i.e. it is most difficult and costlier to fix your code in production than when you are developing your code.

4. Faster debugging.
- Because you have the idea of the desired result of your code, so you can perfect your code.

5. Faster developments.
- Because you have the idea of the desired result of your code, so you can perfect your code.

6. Better design.


TESTING FRAMEWORKS
******************
* We can use any of these to write our unit tests:

1. unittest
- present  the standard Python library, you don't need to install it.

2. nose
- Not in the standard library.
- For simpler tests than unittest.
- It is simpler to use.

3. pytest
- Not in the standard library.
- This is the most popular unit testing framework in Python.
- We will explore pytest and use it.
- sPytest is used for Python API test cases, database projects, artificial intelligence, and even for blockchain applications.

PYTEST INSTALLATION
*******************
#pip install pytest
#pip list
#pytest --help ==> This will show how to use pytest i.e.

    usage: pytest [options] [file_or_dir] [file_or_dir] [...]

PYTEST usage
*************
- we will create a unit test using pytest for our code math_func.py that has two functions.
- The unit test file we will name it as test_math_funct.py.
- prefix "test_" helps pytest to know that this is where unit tests functions are written.

- You can also run pytest using "py.test" only as your command since we used a keyword test in prefix hence it will run pytest of your code.

if you run using py.test:
- if you dont give prefix "test_" on unit test file, pytest wont recognize it as a unit test file if you run command py.test. It will work only if you specify the unittest file.
- same thing for the functions to be tested if you dont use the prefix, they wont be recognized for testing.

-If you want to want to run specific test you can run as follows:
#py.test test_math_func.py::test_add -v

- If we want to run unit tests that have specific key words, we can use -k flag e.g. to run unit tests with 'add' key word:
#py.test test_math_func.py -v -k "add"
test_math_func.py::test_add PASSED                                                                                               [ 50%] 
test_math_func.py::test_add_strings PASSED                                                                                       [100%] 

- You can also use or with -k e.g. to execute tests with 'add' or 'string':
 #pytest test_math_func.py -v -k "add or product"
rootdir: C:\Users\emwadun\OneDrive - Ericsson\Desktop\Projects\pytest-101
collected 3 items                                                                                                                                       

test_math_func.py::test_add PASSED                                                                                                               [ 33%]
test_math_func.py::test_product PASSED                                                                                                           [ 66%] 
test_math_func.py::test_add_strings PASSED

- You can also use 'and'.
- We can also use -m option for mark expresions. For this we need to import pytest module in the test file. Then use decorators as shown in the file test_math_func2.py. 
Example when we want to run only tests marked as string we can run:
#pytest test_math_func2.py -m strings -v
============================================================================ test session starts ============================================================================

collected 3 items / 2 deselected / 1 selected                                                                                                                                 

test_math_func2.py::test_add_strings PASSED                                                                                                                            [100%]

================================================================ 1 passed, 2 deselected, 3 warnings in 0.02s ================================================================ 

As you can see 1 test was selected and passed while 2 others were deselected as they did not match the mark.


- Another option is -x. This tells pytest to stop all the tests if there is any failure:
#pytest .\test_math_func2.py -v -x
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
======================================================================= 1 failed, 3 warnings in 0.07s ======================================================================= 

- Another option is --tb i.e.
--tb=style            traceback print mode (auto/long/short/line/native/no)
This is if we want to show or hide level of the stack trace. e.g.
e.g. 
pytest test_math_func2.py -v --tb=no
Will not show the stack trace incase we have AssertionError.
The above disables the stack trace.

- Another option is --maxfail.
This shows tells pytest the maximum number of failed tests that are expected before the whole unit test exits. example:
#pytest .\test_math_func2.py --maxfail=2

If two tests fails the whole unit test exits but if one fails, the execution will complete to end without exiting.

- Another option is -s or --capture=no
This is to enable to print output.

- Another option is -q for quite mode.
Here no details of the test are shown, only pass or fail is shown.


- parametrize decorator: The builtin pytest.mark.parametrize decorator enables parametrization of arguments for a test function. Here is a typical example of a test function that implements checking that a certain input leads to an expected output.


Pytest Fixtures (how to test your app with pytest fixrures)
***************
- Having the ability to use pytest with fixtures alone can create a career path for any talented Python developer.
Definition:
* Pytest fixtures are functions that can be used to manage our apps states and dependencies. 
Most importantly, they can provide data for testing and a wide range of value types when explicitly called by our testing software. 
You can use the mock data that fixtures create across multiple tests.
- Fixtures are very flexible and have multiple uses cases. Since Python is an object-oriented programming language, we can parse different types of objects to be used as test data such as integers, strings, lists, dictionaries, booleans, classes, floats, and other complex numbers.
- We have to indicate that the function is a fixture with @pytest.fixture. These specific Python decorations let us know that the next method is a pytest fixture.
- Fixtures are modular. This means one or more fixtures may be dependent on another fixture. Therefore, if we change one fixture, it may result in changing the function of other fixtures. This causes our test suite to scale.
- One fixture simply requests the other, and hey! We can combine all sorts of objects together, like strings, or do complex math.


-------
The pytest framework makes it easy to write small tests, yet scales to support complex functional testing for applications and libraries.
pytest is a mature full-featured Python testing tool that helps you write better programs. Learn Pytest basic functionality | Setup & Tear Down | Fixtures
Beginning with a brief introduction and setup of Pytest. We will see How to install pytest, Using Options with Pytest, Parameterizing tests (pytest.mark.parametrize), pytest fixtures + setup/teardown methods, Using PyCharm to run pytest tests.

The best part is, the overhead for creating unit tests is close to zero!
How to use  Options with pytest: 
How to run cases? 
• pytest tests/test_mod.py
• pytest tests/ 
• pytest -k match # def test_match():  
-k EXPRESSION  only run tests which match the given substring expression. 
• pytest --showlocals # trace context 
• pytest -x # stop on ﬁrst failure case 
• pytest --maxfail=2 # on the second 
• pytest -s # enable `print` output 
• pytest --durations=5 # list top 5 slowest cases
• pytest --tb=long # default traceback 
• pytest --tb=line # oneline 
• pytest --tb=short 
• pytest --tb=native # Python default traceback
-m MARKEXPR only run tests matching given mark expression.
example: -m 'mark1 and not mark2'.
  --markers  show markers (builtin, plugin and per-project ones).
  -x, --exitfirst exit instantly on first error or failed test.
  --maxfail=num exit after first num failures or errors.


What is Unit Testing - According to wikipedia, unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use. 

Why Unit Test? - 
Tests Reduce Bugs in New Features and Existing Features
Tests Are Good Documentation
Tests Reduce the Cost of Change
Faster Debugging
Faster Development
Better Design

Python Testing frameworks
unittest - In the Python Standard Library
nose - Not in the Standard Library. Simpler tests than unittest
pytest - Not in the Python Standard Library.

run with following command:
pytest test_math_func.py -v
or
py.test
----